#!/usr/bin/python3 -W ignore::DeprecationWarning
# -*- coding:utf8 -*-
import stanza
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np
import sys
import aesthetic
import information as info
import locate_answer_sentence as locate

nlp = stanza.Pipeline(lang='en', processors='tokenize,mwt,pos,lemma,depparse,constituency,ner')


## Asking Questions ##

def answer_when(closest):
    tokens = info.get_main_info(closest)
    try:
        return "In %s." % tokens['time']
    except:
        return None

def answer_where(closest):
    tokens = info.get_main_info(closest)
    try:
        return tokens['location']
    except:
        return None


def answer_who_whom(question, sentence):
    answer_doc = sentence
    question_doc = question
    candi = list()

    # if answer sentence only has one ent with type "PERSON", return that as answer
    for ent in answer_doc.ents:
        if ent.type == "PERSON":
            candi.append(ent)
    if len(candi) == 1:
        return candi[0].text

    # if there are more than 1 ent, we decide by matching the relation between the verb and the subject between Q and A
    target = None
    if len(candi) > 1:
#        for sent in question_doc.sentences:
        for word in question_doc.words:
            if word.deprel == "nsubj":
                target = "nsubj"
            if word.deprel == "nsubj:pass":
                target = "nsubj:pass"
        if target is not None:
#           for sent in answer_doc.sentences:
            for word in answer_doc.words:
                if word.deprel == target:
                    for c in candi:
                        if str(word.text) == c.text:
                            return str(word.text)

    # if this still doesn't work, we just use the dependency parsing to find an answer.
#    for sent in answer_doc.sentences:
    for word in answer_doc.words:
        if word.deprel == target:
            return str(word.text)


def answer_what_which(closest, question):
    tree = question.constituency
    qtokens = dict()
    info.get_main_info_ques(qtokens, tree)
    if 'ask_verb' not in qtokens: return

    atokens = info.get_main_info(closest)
    
    # identify asking verb
    if qtokens['ask_verb'] in ['am', 'are', 'is', 'was', 'were']:
        try:
            return atokens['main_subj']
        except:
            return None
    else:
        try:
            return atokens['main_obj']
        except:
            return None

def answer_how(closest):
    tokens = info.get_main_info(closest)
    try:
        if tokens['main_verb_lemma'] == 'be':
            return tokens['descript']
        else:
            return tokens['method']
    except:
        return None

def answer_binary(ques, sent):
    for s in sent:
        c = nlp(s).sentences[0]
        res = info.compare_binary(ques, c)
        if res:
            return "Yes."
    return "No."



## Determine Question Types ##

def classify(ques):
    for word in ques.words:
        if word.text.lower() in ['who', 'whom', 'when', 'where', 'what', 'which', 'how']:
            return word.text.lower()
        elif word.upos == 'AUX' and (word.xpos == 'MD' or (word.lemma == 'be')) and word.text != word.text.lower():
            return 'binary'
    return 'others'




if __name__ == "__main__":
#    input_file = sys.argv[1]
#    question_file = sys.argv[2]
    input_file = '11X11-Course-Project-Data/set1/a1.txt'
    question_file = 'test_questions.txt'

    fa = open(input_file, "r", encoding="UTF-8")
    article = fa.read()
    fa.close()

    doc = nlp(article)
    article_list = []
    for sentence in doc.sentences:
        article_list.append(sentence.text)

    fq = open(question_file, "r", encoding="UTF-8")
    question_string = fq.read()
    fq.close()

    question_sentences = nlp(question_string).sentences
    
    for question in question_sentences:
        question_type = classify(question)
        answer = None

        located = locate.locate_answer_sentence(article_list, question.text, 3)
        # located = sim.locate_answer_sentence_w_bert(article_list, question, 3)

        for sent in located:
            sentence = nlp(sent).sentences[0]
            if question_type == 'when':
                answer = answer_when(sentence)
            elif question_type == 'where':
                answer = answer_where(sentence)
            elif question_type in ['who', 'whom']:
                answer = answer_who_whom(question, sentence)
            elif question_type in ['what', 'which', 'whose']:
                answer = answer_what_which(sentence, question)
            elif question_type == 'how':
                answer = answer_how(sentence)
            elif question_type == 'binary':
                answer = answer_binary(question, sentence)
            
            if answer is not None:
                print('A: ' + aesthetic.wrapping(answer))
                break

        if answer is None:
            print("A: There doesn't seem to be a response.")
